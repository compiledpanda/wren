openapi: 3.0.0
info:
  title: Wren Server API
  version: 0.0.1
  description: |
    An HTTP API enabling Client <-> Server Sync

    ### Authentication
    Authentication (Identity) is provided by sending a signed JWT via the Authorization header (Authorization: Bearer <jwt>). The JWT header MUST contain `alg` (the algorithm used to sign) and `typ` (JWT). The payload MUST contain `iat` (issued at time in unix epoch seconds), `exp` (expiration time in unix epoch seconds), and `sub` (user id). The JWT signature MUST be signed utilizing either RS256 OR ES256 and a private key associated with the subject (user).

    JWT Validation requires that: 1) header.alg MUST be an approved signature type, 2) header.typ must be JWT, 3) payload.iat MUST be a number and < now, 4) payload.exp MUST be a number and > now, 5) payload.sub MUST be a uuid string, 6) signature MUST be valid for a key associated with payload.sub.

    Each endpoint that MUST Authenticate:
        
    * MUST return 401 with the MISSING_AUTHORIZATION_HEADER code when the Authorization header is not present
    * MUST return 401 with the MALFORMED_AUTHORIZATION_HEADER code when the Authorization header value does not match /^Bearer .+$/
    * MUST return 401 with the MALFORMED_JWT code when the trimmed JWT does not match /^[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+$/
    * MUST return 401 with the UNAUTHORIZED code when JWT Validation (see above) fails. TODO specify guidance on revealing which validation requirement failed

    ### Authorization
    Authorization (Permissions) is handled by a customizable role-based access control system (RBAC) that denies by default and explicitly allows actions to be taken on resources. Roles have metadata, associated users, and permissions. Users can belong to any number of roles. Permissions consist of a tuple specifying the resource and action. A resource consists of a resource type and (depending on the resource) a resource ID. `*` is a special case that may be used to denote "all available" of a particular resource, resource type, resource id, or action. Permissions are encoded using the following shorthand throughout the documentation: `RESOURCE_TYPE@RESOURCE_ID:ACTION` or `RESOURCE_TYPE:ACTION`. See permissions and examples table below.

    Each endpoint that MUST Authorize:

    * MUST return 403 with the FORBIDDEN code when the caller does not have at least 1 role that grants them the permission(s) specified for the endpoint
    * MUST filter (as approrpiate) ALL sub-items and data that the caller does not have at least 1 role that grants the permission(s) specified for that sub-data in the endpoint
    * MUST authorize independent of the existence of the resources behind the permissions. This means that if a request to modify resource X occurs and resource X does not exist, the endpoint MUST return 403 if there is insufficient permissions to perform the requested actions.

    **Permissions**
    |Resource Type|Resource ID|      Action      |Description|
    |-------------|-----------|------------------|-----------|
    | REPOSITORY  | N/A       | VIEW             | View repository data and statistics |
    | REPOSITORY  | N/A       | SET_METADATA     | Set repository metadata |
    | SHARD       | N/A       | CREATE           | Create shards and set initial metadata |
    | SHARD       | SHARD_ID  | VIEW             | View shard metadata and statistics |
    | SHARD       | SHARD_ID  | SET_METADATA     | Set shard metadata |
    | SHARD       | SHARD_ID  | GET_COMMITS      | Get shard commits |
    | SHARD       | SHARD_ID  | COMMIT           | Commit to a shard |
    | SHARD       | SHARD_ID  | DELETE           | Delete a shard |
    | USER        | N/A       | CREATE           | Create a user |
    | USER        | USER_ID   | VIEW_METADATA    | View user metadata |
    | USER        | USER_ID   | SET_METADATA     | Set user metadata |
    | USER        | USER_ID   | MODIFY_KEYS      | Modify user keys |
    | USER        | USER_ID   | VIEW_ROLE        | View user roles |
    | USER        | USER_ID   | DELETE           | Delete user |
    | ROLE        | N/A       | CREATE           | Create roles |
    | ROLE        | ROLE_ID   | VIEW             | View role and metadata |
    | ROLE        | ROLE_ID   | SET_METADATA     | Set role metadata |
    | ROLE        | ROLE_ID   | VIEW_USERS       | View role users |
    | ROLE        | ROLE_ID   | MODIFY_USERS     | Modify role users |
    | ROLE        | ROLE_ID   | VIEW_PERMISSONS  | View role permissions |
    | ROLE        | ROLE_ID   | MODIFY_PERMISSONS| Modify role permissins |
    | ROLE        | ROLE_ID   | DELETE           | Delete role |

    **Examples**
    |Permission|Description|
    |----------|-----------|
    | `SHARD@*:VIEW` | View all shard metadata and statistics |
    | `SHARD@1234:GET_COMMITS` | Get commits for shard 1234 |

    ### Errors
    Errors (non-2XX) MUST return with a `Content-Type: application/json` header and a response body in the following format: `{"code": "X_Y_Z", "description": "A b c"}`. The code MUST be a UPPER_SNAKE_CASE string and is part of the API contract. The description MUST be a string. The value of the description string is NOT part of the official API contract and is implementation specific.

    Internal errors MUST be caught and MUST return a 500 with the INTERNAL_ERROR code. The description MAY contain a secure description of the error.

    Method Not Allowed errors MAY be caught and MUST return a 405 with the METHOD_NOT_ALLOWED code. The description may contain a secure description of the error.

    Other Implementation Errors MAY be generated and MUST follow the error format described above. For example, a throttled response MAY generate a 429 with a properly formatted error body. These additional errors SHOULD be documented as a part of the implementation documentation.
servers:
  - url: http://localhost:8985
tags:
  - name: Repository
    description: Repository Metadata
  - name: Shard
    description: Shards and Commits
  - name: User
    description: Users and Keys
  - name: Role
    description: Roles and Permissions
security:
  - BearerAuth: []
paths:
  /v1/:
    get:
      summary: Get repository status.
      description: |
        * Endpoint MAY Authenticate (see above)
        * Endpoint MUST return 'ONLINE' in the response body on success
        * TODO Should this endpoint return statistics (# of shards, users, etc.)
      tags:
        - Repository
      responses:
        '200':
          description: Repository status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: The status.
                    type: string
                    enum: [ONLINE]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/metadata:
    get:
      summary: Get repository metadata.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the REPOSITORY:VIEW permission (see above)
        * Endpoint MUST calculate and set the Digest header for every 2XX response
        * Endpoint MUST return 200 with the metadata in the response body on success
        * Endpoint MUST return 0 bytes in the response body if no metadata is present
      tags:
        - Repository
      responses:
        '200':
          description: Repository metadata.
          headers:
            Digest:
              description: A SHA-256 has of the response body
              schema:
                type: string
                example: sha-256=YTU......
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Set repository metadata.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the REPOSITORY:SET_METADATA permission (see above)
        * Endpoint MUST return 400 with the MISSING_DIGEST_HEADER code when the Digest header is not present in the request
        * Endpoint MUST return 400 with the MALFORMED_DIGEST_HEADER code when the Digest header is not valid or does not contain a SHA-256 hash
        * Endpoint MUST return 400 with the DIGEST_BODY_MISMATCH code when the Digest hash does not match the SHA-256 has of the request body
        * Endpoint MUST store the entire request body as the metadata
        * Endpoint MUST return 201 with an empty body on success
      tags:
        - Repository
      parameters:
        - name: Digest
          in: header
          description: The SHA-256 hash of the request body.
          required: true
          schema:
            type: string
            example: sha-256=YTU......
      requestBody:
        description: Binary metadata
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Repository metadata set (there is no response body).
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MISSING_DIGEST_HEADER, MALFORMED_DIGEST_HEADER, DIGEST_BODY_MISMATCH]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/shard:
    get:
      summary: Get repository shards.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the SHARD@[Shard ID]:VIEW permission for each shard returned (see above)
        * Endpoint MUST return 400 with the MALFORMED_INCLUDE_PARAMETER code when the query parameter `include` is not blank and is not a comma-separated list of items where each item is equal to one-of: METADATA
        * Endpoint MUST return 400 with the MALFORMED_AFTER_PARAMETER code when the query parameter `after` is not blank and is not a uuid
        * Endpoint MUST return 400 with the MALFORMED_LIMIT_PARAMETER code when the query parameter `limit` is not blank and is not an integer greater than 1
        * Endpoint MAY return 400 with the MALFORMED_LIMIT_PARAMETER code when the query parameter `limit` is not blank and is not an integer less than a positive integer determined by the Endpoint
        * Endpoint MUST return 200 with an list of shards:
            * in alphanumeric ascending order
            * starting after the value of the query parameter `after` (if set)
            * limited to the value of the query parameter `limit` (if set)
        * Endpoint MUST NOT return shards that the user does not have SHARD@[Shard ID]:VIEW access to
        * Endpoint MUST return shard metadata as a base64 encoded string only when the query parameter `include` contains METADATA
        * Endpoint MUST return an empty string if there is no shard metadata when returning shard metadata
      tags:
        - Shard
      parameters:
        - name: include
          in: query
          description: Additional information to include
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [METADATA]
            default: ''
        - name: after
          in: query
          description: Retrieve shards after this one
          required: false
          schema:
            type: string
            format: uuid
            default: ''
        - name: limit
          in: query
          description: Maximum number of shards to return
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        '200':
          description: Repository shards.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    description: Shard data.
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          description: The shard id.
                          type: string
                          format: uuid
                        metadata:
                          description: The shard metadata (base64 encoded). Only included when ?include=METADATA
                          type: string
                          format: base64
                          example: QXY...
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_INCLUDE_PARAMETER, MALFORMED_AFTER_PARAMETER, MALFORMED_LIMIT_PARAMETER]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a repository shard.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the SHARD:CREATE permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_REQUEST_BODY code when the request body is not a valid JSON object
        * Endpoint MUST return 400 with the MALFORMED_METADATA_FIELD code when the metadata field is not an empty or base64 encoded string
        * Endpoint MUST generate a new uuid and assign it as the shard ID
        * Endpoint MUST return 201 with the newly created shard ID and base64 encoded metadata
        * Endpoint MUST return an empty string if there is no shard metadata
      tags:
        - Shard
      requestBody:
        description: Shard data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  description: Shard metadata (base64 encoded string), or an empty string if there is no shard metadata.
                  type: string
                  format: base64
                  example: QXY...
              required: [metadata]
      responses:
        '201':
          description: Shard created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: The shard id.
                    type: string
                    format: uuid
                  metadata:
                    description: The shard metadata (base64 encoded).
                    type: string
                    format: base64
                    example: QXY...
                required: [id, metadata]
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_REQUEST_BODY, MALFORMED_METADATA_FIELD]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/shard/{shardId}:
    get:
      summary: Get shard data.
      description: Get shard data.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
        - name: include
          in: query
          description: Additional information to include
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [METADATA]
            default: ''
      responses:
        '200':
          description: Shard data.
    put:
      summary: Create a shard with a particular ID.
      description: Set shard data.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Shard data.
    delete:
      summary: Delete a shard with a particular ID.
      description: Delete shard.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Shard deleted.
  /v1/shard/{shardId}/metadata:
    get:
      summary: Get shard metadata.
      description: Get shard metadata.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get shard metadata.
    put:
      summary: Set shard metadata.
      description: Set shard metadata.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Shard metadata set.
  /v1/shard/{shardId}/commit:
    get:
      summary: Get shard commits.
      description: Get shard commits.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get shard commits.
    post:
      summary: Create shard commit.
      description: Create shard commit.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Shard commit created.
  /v1/shard/{shardId}/commit/{number}:
    get:
      summary: Get shard commit.
      description: Get shard commit.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
        - name: number
          in: path
          description: Commit ID
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        '200':
          description: Get shard commit.
    put:
      summary: Create shard commit.
      description: Create shard commit. Will fail unless commit number is the next number in sequence.
      tags:
        - Shard
      parameters:
        - name: shardId
          in: path
          description: Shard ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Shard commit created.
  /v1/user:
    get:
      summary: Get repository users.
      description: Get repository users and their metadata.
      tags:
        - User
      responses:
        '200':
          description: Repository users.
    post:
      summary: Create repository user.
      description: Create repository user.
      tags:
        - User
      responses:
        '201':
          description: Repository user created.
  /v1/user/{userId}:
    get:
      summary: Get user data.
      description: Get user data.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User data.
    delete:
      summary: Delete a user.
      description: Delete user.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted.
  /v1/user/{userId}/metadata:
    get:
      summary: Get user metadata.
      description: Get user metadata.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User metadata.
    put:
      summary: Set user metadata.
      description: Set user metadata.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: User metadata set.
  /v1/user/{userId}/key:
    get:
      summary: Get user keys.
      description: Get user keys.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User keys.
    post:
      summary: Add a user key.
      description: Add a user key.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: User key added.
  /v1/user/{userId}/key/{key}:
    get:
      summary: Get user key.
      description: Get user key.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - name: key
          in: path
          description: Key ID
          required: true
          schema:
            type: string
            format: tbd
      responses:
        '200':
          description: User key.
    delete:
      summary: Remove user key.
      description: Remove user key.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - name: key
          in: path
          description: Key ID
          required: true
          schema:
            type: string
            format: tbd
      responses:
        '204':
          description: User key removed.
  /v1/role:
    get:
      summary: Get role data.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:VIEW permission for each role returned (see above)
        * Endpoint MUST return 400 with the MALFORMED_INCLUDE_PARAMETER code when the query parameter `include` is not blank and is not a comma-separated list of items where each item is equal to one-of: METADATA, USERS, PERMISSIONS
        * Endpoint MUST return 400 with the MALFORMED_AFTER_PARAMETER code when the query parameter `after` is not blank and is not a uuid
        * Endpoint MUST return 400 with the MALFORMED_LIMIT_PARAMETER code when the query parameter `limit` is not blank and is not an integer greater than 1
        * Endpoint MAY return 400 with the MALFORMED_LIMIT_PARAMETER code when the query parameter `limit` is not blank and is not an integer less than a positive integer determined by the Endpoint
        * Endpoint MUST return 200 with an list of roles:
            * in alphanumeric ascending order
            * starting after the value of the query parameter `after` (if set)
            * limited to the value of the query parameter `limit` (if set)
        * Endpoint MUST NOT return roles that the user does not have ROLE@ROLE_ID:VIEW access to
        * Endpoint MUST return the metadata field as a base64 encoded string (or blank string if empty) only when the `include` parameter includes METADATA (the field is omitted otherwise)
        * Endpoint MUST return the users field only when the `include` parameter includes USERS (the field is omitted otherwise)
        * Endpoint MUST return null for the users field when the `include` parameter includes USERS and the user does not have the ROLE@ROLE_ID:VIEW_USERS permission for that role
        * Endpoint MAY return users from the specified role in a sorted order
        * Endpoint MUST return the permissions field only when the `include` parameter includes PERMISSIONS (the field is omitted otherwise)
        * Endpoint MUST return null for the permissions field when the `include` parameter includes PERMISSIONS and the user does not have the ROLE@ROLE_ID:VIEW_PERMISSONS permission for that role
        * Endpoint MAY return permissions from the specified role in a sorted order
      tags:
        - Role
      parameters:
        - name: include
          in: query
          description: Additional information to include
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [METADATA, USERS, PERMISSIONS]
            default: ''
        - name: after
          in: query
          description: Retrieve roles after this one
          required: false
          schema:
            type: string
            format: uuid
            default: ''
        - name: limit
          in: query
          description: Maximum number of roles to return
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        '200':
          description: Role data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    description: Role data.
                    type: array
                    items:
                      $ref: '#/components/schemas/RoleResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_INCLUDE_PARAMETER, MALFORMED_AFTER_PARAMETER, MALFORMED_LIMIT_PARAMETER]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create role.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE:CREATE permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_REQUEST_BODY code when the request body is not a valid JSON object
        * Endpoint MUST return 400 with the MALFORMED_METADATA_FIELD code when the metadata field is not an empty or base64 encoded string
        * Endpoint MUST generate a new uuid and assign it as the role ID
        * Endpoint MUST add the role and metadata under the new ID
        * Endpoint MUST return 201 with the newly created role ID and base64 encoded metadata
        * Endpoint MUST return an empty string if there is no role metadata
      tags:
        - Role
      requestBody:
        description: Role data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  description: Role metadata (base64 encoded string), or an empty string if there is no role metadata.
                  type: string
                  format: base64
                  example: QXY...
              required: [metadata]
      responses:
        '201':
          description: Role created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: The role id.
                    type: string
                    format: uuid
                  metadata:
                    description: The role metadata (base64 encoded).
                    type: string
                    format: base64
                    example: QXY...
                required: [id, metadata]
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_REQUEST_BODY, MALFORMED_METADATA_FIELD]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/role/{roleId}:
    get:
      summary: Get role data.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:VIEW permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST return 400 with the MALFORMED_INCLUDE_PARAMETER code when the query parameter `include` is not blank and is not a comma-separated list of items where each item is equal to one-of: METADATA, USERS, PERMISSIONS
        * Endpoint MUST return 200 with the id field on success
        * Endpoint MUST return the metadata field as a base64 encoded string (or blank string if empty) only when the `include` parameter includes METADATA (the field is omitted otherwise)
        * Endpoint MUST return the users field when the `include` parameter includes USERS (the field is omitted otherwise)
        * Endpoint MUST return null for the users field when the `include` parameter includes USERS and the user does not have the ROLE@ROLE_ID:VIEW_USERS permission
        * Endpoint MAY return users from the specified role in a sorted order
        * Endpoint MUST return the permissions field when the `include` parameter includes PERMISSIONS (the field is omitted otherwise)
        * Endpoint MUST return null for the permissions field when the `include` parameter includes PERMISSIONS and the user does not have the ROLE@ROLE_ID:VIEW_PERMISSONS permission
        * Endpoint MAY return permissions from the specified role in a sorted order
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
        - name: include
          in: query
          description: Additional information to include
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [METADATA, USERS, PERMISSIONS]
            default: ''
      responses:
        '200':
          description: Role data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID, MALFORMED_INCLUDE_PARAMETER]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete role.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:DELETE permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST remove the role and all associated information
        * Endpoint MUST return 200 with an empty body on success
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role removed (there is no response body).
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/role/{roleId}/metadata:
    get:
      summary: Get role metadata.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:VIEW permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST calculate and set the Digest header for every 2XX response
        * Endpoint MUST return 200 with the metadata in the response body on success
        * Endpoint MUST return 0 bytes in the response body if no metadata is present
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role metadata.
          headers:
            Digest:
              description: A SHA-256 has of the response body
              schema:
                type: string
                example: sha-256=YTU......
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Set role metadata.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:SET_METADATA permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST return 400 with the MISSING_DIGEST_HEADER code when the Digest header is not present in the request
        * Endpoint MUST return 400 with the MALFORMED_DIGEST_HEADER code when the Digest header is not valid or does not contain a SHA-256 hash
        * Endpoint MUST return 400 with the DIGEST_BODY_MISMATCH code when the Digest hash does not match the SHA-256 has of the request body
        * Endpoint MUST store the entire request body as the role metadata
        * Endpoint MUST return 201 with an empty body on success
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
        - name: Digest
          in: header
          description: The SHA-256 hash of the request body.
          required: true
          schema:
            type: string
            example: sha-256=YTU......
      requestBody:
        description: Binary metadata
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Role metadata set (there is no response body).
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID, MISSING_DIGEST_HEADER, MALFORMED_DIGEST_HEADER, DIGEST_BODY_MISMATCH]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/role/{roleId}/user:
    get:
      summary: Get role users.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:VIEW_USERS permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST return 200 with all users from the specified roles
        * Endpoint MAY return all users from the specified role in a sorted order
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    description: Shard data.
                    type: array
                    items:
                      description: Permissions
                      type: object
                      properties:
                        id:
                          description: The user id.
                          type: string
                          format: uuid
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add user(s) to role.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:MODIFY_USERS permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST return 400 with the MALFORMED_USER_ID code when a user id in the request body is malformed
        * Endpoint MUST return 404 with the USER_NOT_FOUND code when a user id in the request body is not found
        * Endpoint MUST add the specified user(s) to the specified role
        * Endpoint MUST return 201 with an empty body on success
        * Endpoint MAY be idempotent and MAY not error if the specified user is currently associated with the specified role
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User(s)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: The user id
                  type: array
                  items:
                    type: string
                    format: uuid
              required: [users]
      responses:
        '201':
          description: User(s) added to role. No response body returned.
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID, MALFORMED_USER_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND, USER_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/role/{roleId}/user/{userId}:
    delete:
      summary: Remove user from role.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:MODIFY_USERS permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MAY return 400 with the MALFORMED_USER_ID code when the path parameter `userId` is malformed
        * Endpoint MAY return 404 with the USER_NOT_FOUND code when the permission is not found
        * Endpoint MUST remove the specified user from the specified role
        * Endpoint MUST return 204 with an empty body on success
        * Endpoint MAY be idempotent and MAY not error if the specified user is not currently associated with the specified role
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Role user removed. No response body returned.
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID, MALFORMED_USER_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND, USER_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/role/{roleId}/permission:
    get:
      summary: Get role permissions.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:VIEW_PERMISSONS permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST return 200 with all permissions from the specified role
        * Endpoint MAY return all permissions from the specified role in a sorted order
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role permissions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    description: Shard data.
                    type: array
                    items:
                      description: Permissions
                      $ref: '#/components/schemas/PermissionResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add permission to role.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:MODIFY_PERMISSONS permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MUST return 400 with the MALFORMED_REQUEST_BODY code when the request body is not a valid JSON object
        * Endpoint MUST return 400 with the MALFORMED_RESOURCE_FIELD code when the resource field is not a valid JSON object
        * Endpoint MUST return 400 with the MALFORMED_RESOURCE_TYPE_FIELD code when the resource type field is not a valid string
        * Endpoint MUST return 400 with the MALFORMED_RESOURCE_ID_FIELD code when the resource id field is not a valid string (see permissions above)
        * Endpoint MUST return 400 with the MALFORMED_ACTION_FIELD code when the action field is not a valid string (see permissions above)
        * Endpoint MUST generate a new id and assign it as the permission ID
        * Endpoint MUST add the specified permission to the specified role
        * Endpoint MUST return 200 with the newly associated permission from the specified role
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Permission data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resource:
                  description: The permission resource. Note that id is conditionally required depending on the type and action.
                  type: object
                  properties:
                    type:
                      description: The resource type
                      type: string
                      enum: [REPOSITORY, SHARD, USER, ROLE, '*']
                      example: SHARD
                    id:
                      description: The resource id
                      type: string
                      example: '*'
                  required: [type]
                action:
                  description: The permission action. Note that the value depends on the resource
                  type: string
                  example: VIEW
              required: [resource, action]
      responses:
        '201':
          description: Role permission added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID, MALFORMED_REQUEST_BODY, MALFORMED_RESOURCE_FIELD, MALFORMED_RESOURCE_TYPE_FIELD, MALFORMED_RESOURCE_ID_FIELD, MALFORMED_ACTION_FIELD]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/role/{roleId}/permission/{permissionId}:
    delete:
      summary: Remove permission from role.
      description: |
        * Endpoint MUST Authenticate (see above)
        * Endpoint MUST Authorize, requiring the ROLE@ROLE_ID:MODIFY_PERMISSONS permission (see above)
        * Endpoint MUST return 400 with the MALFORMED_ROLE_ID code when the path parameter `roleId` is not a uuid
        * Endpoint MUST return 404 with the ROLE_NOT_FOUND code when the role is not found
        * Endpoint MAY return 400 with the MALFORMED_PERMISSON_ID code when the path parameter `permissionId` is malformed
        * Endpoint MAY return 404 with the PERMISSON_NOT_FOUND code when the permission is not found
        * Endpoint MUST remove the specified permission from the specified role
        * Endpoint MUST return 204 with an empty body on success
        * Endpoint MAY be idempotent and MAY not error if the specified permission is not currently associated with the specified role
      tags:
        - Role
      parameters:
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
            format: uuid
        - name: permissionId
          in: path
          description: Permission ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Role permission removed. No response body returned.
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [MALFORMED_ROLE_ID, MALFORMED_PERMISSON_ID]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The error code.
                    type: string
                    enum: [ROLE_NOT_FOUND, PERMISSON_NOT_FOUND]
                  description:
                    description: The error description.
                    type: string
                    example: Helpful feedback for the developer.
                required: [code, description]
        '500':
          $ref: '#/components/responses/InternalError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                description: The error code.
                type: string
                enum: [MISSING_AUTHORIZATION_HEADER, MALFORMED_AUTHORIZATION_HEADER, MALFORMED_JWT, UNAUTHORIZED]
                example: UNAUTHORIZED
              description:
                description: The error description.
                type: string
                example: Helpful feedback for the developer.
            required: [code, description]
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                description: The error code.
                type: string
                enum: [FORBIDDEN]
              description:
                description: The error description.
                type: string
                example: Helpful feedback for the developer.
            required: [code, description]
    InternalError:
      description: Internal Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                description: The error code.
                type: string
                enum: [INTERNAL_ERROR]
              description:
                description: The error description.
                type: string
                example: Helpful feedback for the developer.
            required: [code, description]
  schemas:
    RoleResponse:
      type: object
      properties:
        id:
          description: The role id.
          type: string
          format: uuid
        metadata:
          description: The role metadata (base64 encoded).
          type: string
          format: base64
          nullable: true
          example: QXY...
        users:
          description: The role's users.
          type: array
          nullable: true
          items:
            description: Users
            type: object
            properties:
              id:
                description: User id.
                type: string
                format: uuid
        permissions:
          description: The role's permissions
          type: array
          nullable: true
          items:
            description: Permission
            $ref: '#/components/schemas/PermissionResponse'
      required: [id, metadata, users, permissions]
    PermissionResponse:
      type: object
      properties:
        id:
          description: The permission id. The value is implementation Specific
          type: string
          example: Opaque Value
        resource:
          description: The permission resource. Note that id is conditionally required depending on the type and action.
          type: object
          properties:
            type:
              description: The resource type
              type: string
              enum: [REPOSITORY, SHARD, USER, ROLE, '*']
              example: SHARD
            id:
              description: The resource id
              type: string
              example: '*'
          required: [type]
        action:
          description: The permission action. Note that the value depends on the resource
          type: string
          example: VIEW
      required: [id, resource, action]

